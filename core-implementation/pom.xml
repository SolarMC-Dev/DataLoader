<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<parent>
		<artifactId>dataloader</artifactId>
		<groupId>gg.solarmc.loader</groupId>
		<version>0.1.0-SNAPSHOT</version>
	</parent>
	<modelVersion>4.0.0</modelVersion>

	<artifactId>loader-implementation</artifactId>

    <properties>
		<flyway.version>7.5.0</flyway.version>
        <jooq.version>3.14.4</jooq.version>
		<hikaricp.version>3.4.5</hikaricp.version>

		<!-- The port the test MariaDB instance will run on -->
		<mariadb-test-port>50000</mariadb-test-port>
    </properties>

	<build>
		<plugins>
			<!--
			These 3 plugins handle the development lifecycle with respect to flyway and jooq.
			First, mariadb4j-maven-plugin starts a temporary MariaDB instance.
			Second, flyway applies migrations to this database.
			Third, jooq reads the schema and generates table and column references based on it.
			Finally, mariadb4-maven-plugin stops the MariaDB instance.

			Points of interest:
			* The flyway and jooq plugins are both run in the generate-sources phase. As a result,
			  the ordering of the plugin declarations is significant.
			* There are no 'pre-generate-sources' or 'post-generate-sources' phases in Maven,
			  so 'initialize' and 'generate-resources' are instead used for starting and stopping
			  the temporary MariaDB instance.
			-->
			<plugin>
				<groupId>ch.vorburger.mariaDB4j</groupId>
				<artifactId>mariaDB4j-maven-plugin</artifactId>
				<version>${mariadb4j.version}</version>
				<executions>
					<execution>
						<id>setup</id>
						<!-- Pre generate-sources = initialize -->
						<phase>initialize</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>teardown</id>
						<!-- Post generate-sources = generate-resources -->
						<phase>generate-resources</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<dataDir>${project.build.outputDirectory}/mariadb4j-temporary-database</dataDir>
					<port>${mariadb-test-port}</port>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<version>${flyway.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.mariadb.jdbc</groupId>
						<artifactId>mariadb-java-client</artifactId>
						<version>${mariadb-connector.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>migrate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<ignoreFutureMigrations>false</ignoreFutureMigrations>
					<validateMigrationNaming>true</validateMigrationNaming>
					<group>true</group>

					<url>jdbc:mariadb://localhost:${mariadb-test-port}/test</url>
					<user>root</user>
					<!--
					Maven does not allow setting an empty string as the password.
					Therefore flyway-password.conf is used for the password.
					-->
					<configFiles>flyway-password.conf</configFiles>
					<locations>
						<location>classpath:sql-schema</location>
					</locations>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencies>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>${flyway.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>${jooq.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>${jooq.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>${jooq.version}</version>
		</dependency>
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>
			<version>${hikaricp.version}</version>
		</dependency>
		<dependency>
			<groupId>space.arim.dazzleconf</groupId>
			<artifactId>dazzleconf-ext-snakeyaml</artifactId>
		</dependency>
		<dependency>
			<groupId>gg.solarmc.loader</groupId>
			<artifactId>loader-core</artifactId>
		</dependency>
	</dependencies>
</project>